@startuml

title __CONTROLLER's Class Diagram__\n

  namespace at.jku.se.controller {
    class at.jku.se.controller.HighScoreBoardController {
        ~ higScoreList : List<HighScoreObject>
        ~ highScoreGameList : ObservableList<String>
        ~ lvHighScoreGames : ListView<String>
        ~ nameColumn : TableColumn<HighScoreObject, String>
        ~ scoreColumn : TableColumn<HighScoreObject, Long>
        ~ selected : String
        - highScore : TableView<HighScoreObject>
        - ivSavegame : ImageView
        - label : Label
        - lbDiff : Label
        - lbGameName : Label
        - lbGen : Label
        - lbPlayer : Label
        - lbScore : Label
        - lbTime : Label
        - lbVersion : Label
        - menuBar : MenuBar
        + displaySelected()
        + fillListView()
        + handleButtonBackHighMainMen()
        + handleButtonBacktoMain()
        + initialize()
        ~ getHighscorer()
    }
  }
  

  namespace at.jku.se.controller {
    class at.jku.se.controller.HighScoreBoardControllerT {
        + label : Label
        + screen : TextField
        ~ gameVersion : TableColumn<HighScoreObject, String>
        ~ nameColumn : TableColumn<HighScoreObject, String>
        ~ playerColumn : TableColumn<HighScoreObject, String>
        ~ scoreColumn : TableColumn<HighScoreObject, Long>
        ~ timeplayed : TableColumn<HighScoreObject, String>
        - highScore : TableView<HighScoreObject>
        - menuBar : MenuBar
        + displaySelected()
        + fillListView()
        + getHighscorer()
        + handleButtonBacktoMain()
        + initialize()
    }
  }
  

  namespace at.jku.se.controller {
    class at.jku.se.controller.LoadGameController {
        ~ difficulty : String
        ~ fileName : String
        ~ generateType : String
        ~ lvSaveGames : ListView
        ~ saveGameList : ObservableList<String>
        ~ selected : String
        ~ version : String
        {static} - BTN_FREIFORM : String
        {static} - BTN_REGULAR : String
        {static} - BTN_SAMURAI : String
        - btnBackSavedMainMen : Button
        - btnContinue : Button
        - btnExport : Button
        - btnImport : Button
        - ivSavegame : ImageView
        - lbDifficulty : Label
        - lbGameName : Label
        - lbGenerate : Label
        - lbVersion : Label
        - menuBar : MenuBar
        - root : AnchorPane
        + fillListView()
        + handleButtonBackSavedMainMen()
        + handleButtonDeleteGame()
        + handleButtonImportGame()
        + handleButtonLoadGame()
        + initialize()
    }
  }
  

  namespace at.jku.se.controller {
    class at.jku.se.controller.MainMenueController {
        - btnExit : Button
        - btnLoadGame : Button
        - btnNewGame : Button
        - root : AnchorPane
        + handleButtonExit()
        + handleButtonLoadGame()
        + handleButtonMainHighScores()
        + handleButtonNewGame()
        + initialize()
    }
  }
  

  namespace at.jku.se.controller {
    class at.jku.se.controller.NewGameController {
        ~ difficulty : String
        ~ generateType : String
        ~ version : String
        - btnContinue : Button
        - lbDifficulty : Label
        - rbSaFreiform : RadioButton
        - rbSaRegulaer : RadioButton
        - rbSaSamurai : RadioButton
        - rbSgAuto : RadioButton
        - rbSgManuell : RadioButton
        - rbSkEasy : RadioButton
        - rbSkHard : RadioButton
        - rbSkMedium : RadioButton
        - root : AnchorPane
        + handleButtonBackNewMainMen()
        + handleButtonContinue()
        + handleButtonSelfNewGame()
        + initialize()
    }
  }
  

  namespace at.jku.se.controller {
    class at.jku.se.controller.PlayfieldController {
        ~ colorindex : int
        ~ colors : ObservableList<String>
        ~ currentColor : String
        ~ diffculty : String
        ~ fieldSize : int
        ~ fileName : String
        ~ generateType : String
        ~ groupCount : int[]
        ~ initPerc : int
        ~ isNew : boolean
        ~ loadtime : long
        ~ longtimer : long
        ~ stage : Stage
        ~ textFields : TextField[][]
        ~ time : String
        ~ timerThread : Thread
        ~ version : String
        {static} - BTN_EASY : String
        {static} - BTN_FREIFORM : String
        {static} - BTN_HARD : String
        {static} - BTN_MEDIUM : String
        {static} - BTN_REGULAR : String
        {static} - BTN_SAMURAI : String
        - btnAddNumbers : Button
        - btnStartGame : Button
        - colorList : GridPane
        - colorListNew : ListView
        - lbClock : Label
        - menuBar : MenuBar
        - miSave : MenuItem
        - playfield : GridPane
        - root : AnchorPane
        - splitPane : SplitPane
        + LoadGameInfos()
        + handleButtonBacktoMain()
        + handleButtonHint()
        + handleButtonSaveGame()
        + handleButtonSolve()
        + handleButtonStartGame()
        + initData()
        + initFirstNumbers()
        + initializePlayfield()
        + loadInitData()
        + setStyle()
        + startTimer()
        + stopTimer()
        - SaveDialog()
        - initField()
        - initFields()
        - initFreiformField()
    }
  }
  

  namespace at.jku.se.controller {
    class at.jku.se.controller.PlayfieldController.ColorCell {
        # updateItem()
    }
  }
  

  namespace at.jku.se.controller {
    class at.jku.se.controller.SudokuHelper {
        + defaultTextField()
        + getBoardSolution()
        + getCurrentBoard()
        + getHint()
        {static} + hideUnusedBoxes()
        + setNormalBoxesStyle()
        + solveBoard()
    }
  }
  

  at.jku.se.controller.HighScoreBoardController .up.|> javafx.fxml.Initializable
  at.jku.se.controller.HighScoreBoardControllerT .up.|> javafx.fxml.Initializable
  at.jku.se.controller.LoadGameController .up.|> javafx.fxml.Initializable
  at.jku.se.controller.MainMenueController .up.|> javafx.fxml.Initializable
  at.jku.se.controller.NewGameController .up.|> javafx.fxml.Initializable
  at.jku.se.controller.PlayfieldController o-- at.jku.se.controller.SudokuHelper : h
  at.jku.se.controller.PlayfieldController +-down- at.jku.se.controller.PlayfieldController.ColorCell
  at.jku.se.controller.PlayfieldController.ColorCell -up-|> javafx.scene.control.ListCell


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
